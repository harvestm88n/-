import tkinter as tk

def check_point(x, y):
    """ Проверяет одну точку с координатами (x,y)
            Возвращает число от 0 до 50. """

    c = complex(x, y) # Создаю комплексное число из координат x и y
    z = complex(0)     # Начинаю с нуля 

    # Повторяем 50 раз - проверяем точку по формуле Мандельброта
    for i in range(50):
        z = z * z + c # Основная формула: z = z² + c

        # Если модуль числа больше 2 => точка точно не в множестве
        if abs(z) > 2:
            return i # Возвращаю номер шага, на котором точка вышла за предел
    return 50 # Если за 50 шагов точка не вышла за предел, то она в множестве

def draw():
    """Рисует множество Мандельброта на экране"""
    canvas.delete("all") # Стираю все, что было нарисовано до
    for px in range(600): # Перебираю все точки экрана по горизонтали
        for py in range(600): # Перебираю все точки экрана по вертикали
            x = x_min + (px / 600) * (x_max - x_min) # Переводим координату пикселя в математическую координату X (px/600 - доля общей ширины * x_max - x_min - на ширину видимой области)
            y = y_min + (py / 600) * (y_max - y_min) # Переводим координату пикселя в математическую координату Y аналогично только по оси Y.

            iters = check_point(x, y) # Проверка точки на вход в множество
            if iters == 50: # Если точка прошла все 50 проверок
                canvas.create_rectangle(px, py, px+1, py+1, outline='darkred', fill='darkred') # Рисуем квадрат 1x1 пиксель в точке px, py

def zoom_in(event):
    """Увеличивает масштаб там, где кликнули мышкой"""
    global x_min, x_max, y_min, y_max # Глобальные переменные, которые хранят видимую область
    cx = x_min + (event.x / 600) * (x_max - x_min) # Находим долю ширины экрана, где мы кликнули, умножаем ее на текущую ширину видимой области. Получаем смещение от левого края карты +  x_min = точная координата точки клика на карте.
    cy = y_min + (event.y / 600) * (y_max - y_min) # Простыми словами находим координаты клика по X и Y и переводим координаты пикселя в математические координаты.

    # Сужаю область видимости
    w = (x_max - x_min) / 2  # Новая ширина = старая ширина / 2
    h = (y_max - y_min) / 2  # Новая высота = старая высота / 2

    # Устанавливаем новые границы и центрируем новую область вокруг точки клика:
    x_min = cx - w/2 # Левая граница = координата клика минус пол-ширины
    x_max = cx + w/2 # Правая граница = координата клика плюс пол-ширины
    y_min = cy - h/2 # Нижняя граница = координата клика минус пол-высоты
    y_max = cy + h/2 # Верхняя граница = координата клика плюс пол-высоты

    draw() # Перерисовываем картинку с новыми значениями


def zoom_out(event):
    """Уменьшает масштаб, там где кликнули мышкой"""
    global x_min, x_max, y_min, y_max # Глобальные переменные, которые хранят видимую область

    # Находим центр текущей видимой области
    cx = (x_min + x_max) / 2 # Центр по X = среднее между левой и правой границами
    cy = (y_min + y_max) / 2 # Центр по Y = аналогично между верхней и нижней границами

    # Расширяю область видимости
    w = (x_max - x_min) * 2 # Новая ширина = текущая ширина × 2
    h = (y_max - y_min) * 2 # Аналогично с высотой

    # Устанавливаю новые границы видимости
    # Центр остается тем же, но область становится больше
    x_min = cx - w/2 # Левая граница = центр минус пол-новой-ширины
    x_max = cx + w/2 # Правая граница = центр плюс пол-новой-ширины
    y_min = cy - h/2 # Нижняя граница = центр минус пол-новой-высоты
    y_max = cy + h/2 # Верхняя граница = центр плюс пол-новой-высоты

    draw() # Перерисовываем картинку с новыми, увеличенными границами

window = tk.Tk() # Создаю окно программы
window.title("Множество Мандельброта") # Заголовок окна
window.geometry("600x600") # Устанавливаю размер окна по ширине и высоте по 600 пикселей
canvas = tk.Canvas(window, width=600, height=600, bg='black') # Создаю холст с шириной и высотой по 600 пикселей и черным фоном
canvas.pack() # Размещаем холст в окне

# Устанавливаю, какую область математической плоскости мы видим сначала
x_min, x_max = -2.0, 1.0
y_min, y_max = -1.5, 1.5


canvas.bind("<Button-1>", zoom_in) # Когда нажимаем левую кнопку мыши - увеличиваем масштаб
canvas.bind("<Button-3>", zoom_out) # Когда нажимаем правую кнопку мыши - уменьшаем масштаб

draw() # Рисуем множество Мандельброта
window.mainloop()# Запуск программы
